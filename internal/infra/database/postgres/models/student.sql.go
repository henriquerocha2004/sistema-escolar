// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: student.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createStudent = `-- name: CreateStudent :exec

INSERT INTO students 
(id, first_name, last_name, birthday, rg_document, cpf_document, email, him_self_responsible, created_at, updated_at)
VALUES
($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateStudentParams struct {
	ID                 uuid.UUID      `json:"id"`
	FirstName          string         `json:"first_name"`
	LastName           string         `json:"last_name"`
	Birthday           time.Time      `json:"birthday"`
	RgDocument         sql.NullString `json:"rg_document"`
	CpfDocument        string         `json:"cpf_document"`
	Email              sql.NullString `json:"email"`
	HimSelfResponsible bool           `json:"him_self_responsible"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
}

// Active: 1691937846246@@127.0.0.1@9500@sistema-escolar
func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) error {
	_, err := q.db.ExecContext(ctx, createStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Birthday,
		arg.RgDocument,
		arg.CpfDocument,
		arg.Email,
		arg.HimSelfResponsible,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findByCPFDocument = `-- name: FindByCPFDocument :one
SELECT id, first_name, last_name, birthday, rg_document, cpf_document, email, him_self_responsible FROM students WHERE cpf_document = $1 LIMIT 1
`

type FindByCPFDocumentRow struct {
	ID                 uuid.UUID      `json:"id"`
	FirstName          string         `json:"first_name"`
	LastName           string         `json:"last_name"`
	Birthday           time.Time      `json:"birthday"`
	RgDocument         sql.NullString `json:"rg_document"`
	CpfDocument        string         `json:"cpf_document"`
	Email              sql.NullString `json:"email"`
	HimSelfResponsible bool           `json:"him_self_responsible"`
}

func (q *Queries) FindByCPFDocument(ctx context.Context, cpfDocument string) (FindByCPFDocumentRow, error) {
	row := q.db.QueryRowContext(ctx, findByCPFDocument, cpfDocument)
	var i FindByCPFDocumentRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Birthday,
		&i.RgDocument,
		&i.CpfDocument,
		&i.Email,
		&i.HimSelfResponsible,
	)
	return i, err
}
