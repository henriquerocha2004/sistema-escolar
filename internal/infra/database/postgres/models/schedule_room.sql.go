// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: schedule_room.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :exec
INSERT INTO class_schedule (id, description, start_at, end_at, school_year_id, created_at, updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateScheduleParams struct {
	ID           uuid.UUID    `json:"id"`
	Description  string       `json:"description"`
	StartAt      time.Time    `json:"start_at"`
	EndAt        time.Time    `json:"end_at"`
	SchoolYearID uuid.UUID    `json:"school_year_id"`
	CreatedAt    sql.NullTime `json:"created_at"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, createSchedule,
		arg.ID,
		arg.Description,
		arg.StartAt,
		arg.EndAt,
		arg.SchoolYearID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
UPDATE class_schedule SET deleted_at = $1 WHERE id = $2
`

type DeleteScheduleParams struct {
	DeletedAt sql.NullTime `json:"deleted_at"`
	ID        uuid.UUID    `json:"id"`
}

func (q *Queries) DeleteSchedule(ctx context.Context, arg DeleteScheduleParams) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, arg.DeletedAt, arg.ID)
	return err
}

const findBySchoolYearId = `-- name: FindBySchoolYearId :many
SELECT class_schedule.id as schedule_id, description, class_schedule.start_at, class_schedule.end_at, school_year.year FROM class_schedule
     JOIN school_year ON school_year.id = class_schedule.school_year_id
     WHERE class_schedule.school_year_id = $1 AND class_schedule.deleted_at IS NULL
`

type FindBySchoolYearIdRow struct {
	ScheduleID  uuid.UUID `json:"schedule_id"`
	Description string    `json:"description"`
	StartAt     time.Time `json:"start_at"`
	EndAt       time.Time `json:"end_at"`
	Year        string    `json:"year"`
}

func (q *Queries) FindBySchoolYearId(ctx context.Context, schoolYearID uuid.UUID) ([]FindBySchoolYearIdRow, error) {
	rows, err := q.db.QueryContext(ctx, findBySchoolYearId, schoolYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindBySchoolYearIdRow
	for rows.Next() {
		var i FindBySchoolYearIdRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.Description,
			&i.StartAt,
			&i.EndAt,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOneSchedule = `-- name: FindOneSchedule :one
SELECT class_schedule.id as schedule_id, description, class_schedule.start_at, class_schedule.end_at, school_year.id FROM class_schedule
     JOIN school_year ON school_year.id = class_schedule.school_year_id
     WHERE class_schedule.id = $1 AND class_schedule.deleted_at IS NULL
`

type FindOneScheduleRow struct {
	ScheduleID  uuid.UUID `json:"schedule_id"`
	Description string    `json:"description"`
	StartAt     time.Time `json:"start_at"`
	EndAt       time.Time `json:"end_at"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) FindOneSchedule(ctx context.Context, id uuid.UUID) (FindOneScheduleRow, error) {
	row := q.db.QueryRowContext(ctx, findOneSchedule, id)
	var i FindOneScheduleRow
	err := row.Scan(
		&i.ScheduleID,
		&i.Description,
		&i.StartAt,
		&i.EndAt,
		&i.ID,
	)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :exec
UPDATE class_schedule SET description = $1, start_at = $2, end_at = $3, school_year_id = $4, updated_at = $5 WHERE id = $6
`

type UpdateScheduleParams struct {
	Description  string       `json:"description"`
	StartAt      time.Time    `json:"start_at"`
	EndAt        time.Time    `json:"end_at"`
	SchoolYearID uuid.UUID    `json:"school_year_id"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	ID           uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateSchedule,
		arg.Description,
		arg.StartAt,
		arg.EndAt,
		arg.SchoolYearID,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
