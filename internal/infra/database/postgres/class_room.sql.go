// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: class_room.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createClass = `-- name: CreateClass :exec
INSERT INTO class_room (id, status, identification, vacancies, vacancies_occupied, shift, level, localization, open_date, school_year_id, room_id, schedule_id, created_at, updated_at, type)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)
`

type CreateClassParams struct {
	ID                uuid.UUID      `json:"id"`
	Status            string         `json:"status"`
	Identification    string         `json:"identification"`
	Vacancies         int32          `json:"vacancies"`
	VacanciesOccupied int32          `json:"vacancies_occupied"`
	Shift             string         `json:"shift"`
	Level             string         `json:"level"`
	Localization      sql.NullString `json:"localization"`
	OpenDate          time.Time      `json:"open_date"`
	SchoolYearID      uuid.UUID      `json:"school_year_id"`
	RoomID            uuid.NullUUID  `json:"room_id"`
	ScheduleID        uuid.UUID      `json:"schedule_id"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	Type              string         `json:"type"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) error {
	_, err := q.db.ExecContext(ctx, createClass,
		arg.ID,
		arg.Status,
		arg.Identification,
		arg.Vacancies,
		arg.VacanciesOccupied,
		arg.Shift,
		arg.Level,
		arg.Localization,
		arg.OpenDate,
		arg.SchoolYearID,
		arg.RoomID,
		arg.ScheduleID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Type,
	)
	return err
}

const deleteClass = `-- name: DeleteClass :exec
UPDATE class_room SET deleted_at = $1 WHERE id = $2
`

type DeleteClassParams struct {
	DeletedAt sql.NullTime `json:"deleted_at"`
	ID        uuid.UUID    `json:"id"`
}

func (q *Queries) DeleteClass(ctx context.Context, arg DeleteClassParams) error {
	_, err := q.db.ExecContext(ctx, deleteClass, arg.DeletedAt, arg.ID)
	return err
}

const findClassById = `-- name: FindClassById :one
SELECT id,
       status,
       identification,
       vacancies,
       vacancies_occupied,
       shift,
       level,
       localization,
       open_date,
       school_year_id,
       room_id,
      schedule_id,
      type
FROM class_room
    WHERE id = $1
        AND deleted_at IS NULL
`

type FindClassByIdRow struct {
	ID                uuid.UUID      `json:"id"`
	Status            string         `json:"status"`
	Identification    string         `json:"identification"`
	Vacancies         int32          `json:"vacancies"`
	VacanciesOccupied int32          `json:"vacancies_occupied"`
	Shift             string         `json:"shift"`
	Level             string         `json:"level"`
	Localization      sql.NullString `json:"localization"`
	OpenDate          time.Time      `json:"open_date"`
	SchoolYearID      uuid.UUID      `json:"school_year_id"`
	RoomID            uuid.NullUUID  `json:"room_id"`
	ScheduleID        uuid.UUID      `json:"schedule_id"`
	Type              string         `json:"type"`
}

func (q *Queries) FindClassById(ctx context.Context, id uuid.UUID) (FindClassByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findClassById, id)
	var i FindClassByIdRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Identification,
		&i.Vacancies,
		&i.VacanciesOccupied,
		&i.Shift,
		&i.Level,
		&i.Localization,
		&i.OpenDate,
		&i.SchoolYearID,
		&i.RoomID,
		&i.ScheduleID,
		&i.Type,
	)
	return i, err
}

const findClassByIdLock = `-- name: FindClassByIdLock :one

SELECT id,
       status,
       identification,
       vacancies,
       vacancies_occupied,
       shift,
       level,
       localization,
       open_date,
       school_year_id,
       room_id,
      schedule_id,
      type
FROM class_room
    WHERE id = $1
        AND deleted_at IS NULL
        FOR UPDATE
`

type FindClassByIdLockRow struct {
	ID                uuid.UUID      `json:"id"`
	Status            string         `json:"status"`
	Identification    string         `json:"identification"`
	Vacancies         int32          `json:"vacancies"`
	VacanciesOccupied int32          `json:"vacancies_occupied"`
	Shift             string         `json:"shift"`
	Level             string         `json:"level"`
	Localization      sql.NullString `json:"localization"`
	OpenDate          time.Time      `json:"open_date"`
	SchoolYearID      uuid.UUID      `json:"school_year_id"`
	RoomID            uuid.NullUUID  `json:"room_id"`
	ScheduleID        uuid.UUID      `json:"schedule_id"`
	Type              string         `json:"type"`
}

func (q *Queries) FindClassByIdLock(ctx context.Context, id uuid.UUID) (FindClassByIdLockRow, error) {
	row := q.db.QueryRowContext(ctx, findClassByIdLock, id)
	var i FindClassByIdLockRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Identification,
		&i.Vacancies,
		&i.VacanciesOccupied,
		&i.Shift,
		&i.Level,
		&i.Localization,
		&i.OpenDate,
		&i.SchoolYearID,
		&i.RoomID,
		&i.ScheduleID,
		&i.Type,
	)
	return i, err
}

const updateClass = `-- name: UpdateClass :exec
UPDATE class_room SET
        status = $1,
        identification = $2,
        vacancies = $3,
        vacancies_occupied = $4,
        shift = $5,
        level = $6,
        localization = $7,
        open_date = $8,
        school_year_id = $9,
        room_id = $10,
        schedule_id = $11,
        updated_at = $12
WHERE id = $13
`

type UpdateClassParams struct {
	Status            string         `json:"status"`
	Identification    string         `json:"identification"`
	Vacancies         int32          `json:"vacancies"`
	VacanciesOccupied int32          `json:"vacancies_occupied"`
	Shift             string         `json:"shift"`
	Level             string         `json:"level"`
	Localization      sql.NullString `json:"localization"`
	OpenDate          time.Time      `json:"open_date"`
	SchoolYearID      uuid.UUID      `json:"school_year_id"`
	RoomID            uuid.NullUUID  `json:"room_id"`
	ScheduleID        uuid.UUID      `json:"schedule_id"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	ID                uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) error {
	_, err := q.db.ExecContext(ctx, updateClass,
		arg.Status,
		arg.Identification,
		arg.Vacancies,
		arg.VacanciesOccupied,
		arg.Shift,
		arg.Level,
		arg.Localization,
		arg.OpenDate,
		arg.SchoolYearID,
		arg.RoomID,
		arg.ScheduleID,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateVacancyOccupied = `-- name: UpdateVacancyOccupied :exec
UPDATE class_room 
    SET vacancies_occupied = $1, 
        updated_at = $2 
WHERE 
    id = $3 
    AND vacancies_occupied < vacancies 
    AND deleted_at IS NULL 
    RETURNING vacancies_occupied
`

type UpdateVacancyOccupiedParams struct {
	VacanciesOccupied int32        `json:"vacancies_occupied"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	ID                uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateVacancyOccupied(ctx context.Context, arg UpdateVacancyOccupiedParams) error {
	_, err := q.db.ExecContext(ctx, updateVacancyOccupied, arg.VacanciesOccupied, arg.UpdatedAt, arg.ID)
	return err
}
