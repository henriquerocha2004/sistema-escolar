// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: services.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createService = `-- name: CreateService :exec
INSERT into services (id, description, price, created_at, updated_at) VALUES ($1,$2,$3,$4,$5)
`

type CreateServiceParams struct {
	ID          uuid.UUID    `json:"id"`
	Description string       `json:"description"`
	Price       string       `json:"price"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) error {
	_, err := q.db.ExecContext(ctx, createService,
		arg.ID,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteService = `-- name: DeleteService :exec
UPDATE services SET deleted_at = $1 WHERE id = $2
`

type DeleteServiceParams struct {
	DeletedAt sql.NullTime `json:"deleted_at"`
	ID        uuid.UUID    `json:"id"`
}

func (q *Queries) DeleteService(ctx context.Context, arg DeleteServiceParams) error {
	_, err := q.db.ExecContext(ctx, deleteService, arg.DeletedAt, arg.ID)
	return err
}

const findServiceById = `-- name: FindServiceById :one
SELECT id, description, price FROM services WHERE id = $1 AND deleted_at IS NULL
`

type FindServiceByIdRow struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
	Price       string    `json:"price"`
}

func (q *Queries) FindServiceById(ctx context.Context, id uuid.UUID) (FindServiceByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findServiceById, id)
	var i FindServiceByIdRow
	err := row.Scan(&i.ID, &i.Description, &i.Price)
	return i, err
}

const updateService = `-- name: UpdateService :exec
UPDATE services SET description = $1, price = $2, updated_at = $3 WHERE id = $4
`

type UpdateServiceParams struct {
	Description string       `json:"description"`
	Price       string       `json:"price"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	ID          uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) error {
	_, err := q.db.ExecContext(ctx, updateService,
		arg.Description,
		arg.Price,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
